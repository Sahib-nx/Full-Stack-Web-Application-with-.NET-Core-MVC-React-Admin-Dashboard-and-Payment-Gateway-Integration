@*
    For more information on enabling MVC for empty projects, visit https://go.microsoft.com/fwlink/?LinkID=397860
*@
@{
}

@model CRM.Models.ViewModel.HybridModel
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Modern Shop - Premium Collection</title>
    <!-- Bootstrap CSS -->
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
    <!-- Font Awesome -->
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
    <!-- Google Fonts -->
    <link href="https://fonts.googleapis.com/css2?family=Poppins:wght@300;400;500;600;700&display=swap" rel="stylesheet">
    <!-- AOS Animation Library -->
    <link href="https://cdnjs.cloudflare.com/ajax/libs/aos/2.3.4/aos.css" rel="stylesheet">
    <link rel="stylesheet" href="~/css/home.css">
</head>
<body>
    <!-- Hero Section -->
    <div class="hero">
        <div class="container">
            <div class="row justify-content-between align-items-center">
                <div class="col-lg-6" data-aos="fade-right" data-aos-duration="1000">
                    <div class="intro-excerpt">
                        <h1>Discover Your <br>Perfect Style</h1>
                        <p class="mb-4">Explore our curated collection of premium products designed to elevate your everyday experiences. Hand-picked for quality and style.</p>
                        <p>
                            <a href="#products" class="btn btn-primary me-2">Shop Collection</a>
                            <a href="#" class="btn btn-outline-light">Learn More</a>
                        </p>
                    </div>
                </div>
                <div class="col-lg-6" data-aos="fade-left" data-aos-duration="1000" data-aos-delay="300">
                    <div class="hero-image text-center">
                        <img src="~/images/hero-image.png" alt="Hero Image" class="img-fluid" loading="lazy">
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Product Section -->
    <div id="products" class="product-section before-footer-section">
        <div class="container">
            <div class="row justify-content-center mb-5">
                <div class="col-md-8 text-center" data-aos="fade-up" data-aos-duration="800">
                    <h2 class="section-title">Featured Products</h2>
                    <p class="text-muted">Discover our most popular items curated just for you</p>
                </div>
            </div>
            
            <!-- Category Pills - Centered with flexbox -->
            <div class="category-pills" data-aos="fade-up" data-aos-duration="800" data-aos-delay="200">
                <div class="category-pill active" data-category="all">All</div>
                <div class="category-pill" data-category="new">New Arrivals</div>
                <div class="category-pill" data-category="bestseller">Best Sellers</div>
                <div class="category-pill" data-category="promotion">Promotions</div>
                <div class="category-pill" data-category="seasonal">Seasonal</div>
            </div>
            
            <div class="row">
                @{
                    var index = 0;
                }
                @foreach (var product in Model.Products)
                {
                    <div class="col-12 col-sm-6 col-md-4 col-lg-3 mb-4 stagger-item" data-aos="fade-up" data-aos-duration="800" data-aos-delay="@((index % 8) * 100)">
                        <a class="product-item" asp-controller="Product" asp-action="Details" asp-route-id="@product.ProductId">
                            <!-- Wishlist Button -->
                            <div class="wishlist-btn">
                                <i class="fa-regular fa-heart"></i>
                            </div>
                            
                            <!-- Product Image with Dynamic Source -->
                            <div class="product-thumbnail-container">
                                @{
                                    string imageSrc = "~/images/placeholder-product.png"; // Default fallback
                                    
                                    // Check if product has ImageUrl (from URL input)
                                    if (!string.IsNullOrEmpty(product.ProductProfileUrl))
                                    {
                                        // If it's a full URL (starts with http), use it directly
                                        if (product.ProductProfileUrl.StartsWith("http"))
                                        {
                                            imageSrc = product.ProductProfileUrl;
                                        }
                                        // If it's a Cloudinary URL or relative path
                                        else if (product.ProductProfileUrl.Contains("cloudinary") || product.ProductProfileUrl.StartsWith("~/"))
                                        {
                                            imageSrc = product.ProductProfileUrl;
                                        }
                                        // If it's just a filename, assume local upload
                                        else
                                        {
                                            imageSrc = "~/images/uploads/" + product.ProductProfileUrl;
                                        }
                                    }
                                    // Fallback to old pattern if no ImageUrl
                                    else
                                    {
                                        imageSrc = "~/images/product-" + product.ProductId + ".png";
                                    }
                                }
                                <img src="@imageSrc" 
                                     class="product-thumbnail" 
                                     alt="@product.ProductName"
                                     loading="lazy"
                                     onerror="this.src='~/images/placeholder-product.png'">
                            </div>
                            
                            <!-- Product Info -->
                            <div class="product-info">
                                <h3 class="product-title">@product.ProductName</h3> 
                                
                                @if (product.IsArchived)
                                {
                                    <p class="unavailable-product">
                                        <i class="fas fa-exclamation-circle me-1"></i> Product Unavailable
                                    </p>
                                }
                                
                                <div class="product-meta">
                                    <strong class="product-price">$@product.Price.ToString("F2")</strong>
                                    
                                    <div class="icon-cross">
                                        <i class="fas fa-arrow-right"></i>
                                    </div>
                                </div>
                            </div>
                        </a>
                    </div>
                    index++;
                }
            </div>
            
            <div class="row mt-5">
                <div class="col-12 text-center" data-aos="fade-up" data-aos-duration="800" data-aos-delay="400">
                    <a href="#" class="btn btn-primary view-all-btn">View All Products</a>
                </div>
            </div>
        </div>
    </div>

    <!-- Bootstrap JS & Popper -->
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
    <!-- AOS Animation Library -->
    <script src="https://cdnjs.cloudflare.com/ajax/libs/aos/2.3.4/aos.js"></script>
    <!-- Custom JS -->
    <script>
        // Initialize AOS Animation with optimized settings
        AOS.init({
            once: true, // Animation happens only once
            duration: 800,
            easing: 'ease-out-cubic'
        });
        
        // Optimized staggered animation with better performance
        document.addEventListener('DOMContentLoaded', function() {
            const staggerItems = document.querySelectorAll('.stagger-item');
            
            // Use Intersection Observer for better performance
            const observer = new IntersectionObserver((entries) => {
                entries.forEach((entry, index) => {
                    if (entry.isIntersecting) {
                        // Use requestAnimationFrame for smoother animations
                        requestAnimationFrame(() => {
                            setTimeout(() => {
                                entry.target.classList.add('fade-up', 'active');
                            }, (index % 8) * 50); // Reduced delay for faster loading
                        });
                        observer.unobserve(entry.target);
                    }
                });
            }, { 
                threshold: 0.1,
                rootMargin: '50px' // Start animation slightly before element is visible
            });
            
            staggerItems.forEach(item => observer.observe(item));
            
            // Optimized category pill functionality with event delegation
            const categoryContainer = document.querySelector('.category-pills');
            if (categoryContainer) {
                categoryContainer.addEventListener('click', function(e) {
                    if (e.target.classList.contains('category-pill')) {
                        // Remove active class from all pills
                        categoryContainer.querySelectorAll('.category-pill').forEach(pill => 
                            pill.classList.remove('active')
                        );
                        // Add active class to clicked pill
                        e.target.classList.add('active');
                        
                        // Optional: Add category filtering logic here
                        const category = e.target.dataset.category;
                        // filterProducts(category);
                    }
                });
            }
            
            // Preload critical images for better performance
            const criticalImages = document.querySelectorAll('.product-thumbnail');
            const imageObserver = new IntersectionObserver((entries) => {
                entries.forEach(entry => {
                    if (entry.isIntersecting) {
                        const img = entry.target;
                        if (img.dataset.src) {
                            img.src = img.dataset.src;
                            img.removeAttribute('data-src');
                        }
                        imageObserver.unobserve(img);
                    }
                });
            });
            
            // Lazy load images that are not immediately visible
            criticalImages.forEach((img, index) => {
                if (index > 8) { // Only lazy load images after the first row
                    imageObserver.observe(img);
                }
            });
        });
        
        // Optional: Add smooth scrolling for better UX
        document.querySelectorAll('a[href^="#"]').forEach(anchor => {
            anchor.addEventListener('click', function (e) {
                e.preventDefault();
                const target = document.querySelector(this.getAttribute('href'));
                if (target) {
                    target.scrollIntoView({
                        behavior: 'smooth',
                        block: 'start'
                    });
                }
            });
        });
    </script>
</body>
